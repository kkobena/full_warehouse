create sequence revinfo_seq
  increment by 50;

alter sequence revinfo_seq owner to warehouse;

create table authority
(
  name    varchar(50) not null
    primary key,
  libelle varchar(100)
);

alter table authority
  owner to warehouse;

create table banque
(
  id           bigint generated by default as identity
    primary key,
  adresse      varchar(255),
  beneficiaire varchar(255),
  code         varchar(100),
  nom          varchar(100) not null
);

alter table banque
  owner to warehouse;

create table categorie
(
  id      bigint generated by default as identity
    primary key,
  code    varchar(255),
  libelle varchar(255) not null
    constraint uk201klrwuww0os41kte46ac6lq
      unique
);

alter table categorie
  owner to warehouse;

create table dci
(
  id      bigint generated by default as identity
    primary key,
  code    varchar(20)  not null
    constraint uke3c6g8lyasluveuhuckir2lod
      unique,
  libelle varchar(255) not null
    constraint ukitjoajb16gqh53rhwby9jeoh4
      unique
);

alter table dci
  owner to warehouse;

create index dci_libelle_index
  on dci (libelle);

create table famille_produit
(
  id           bigint generated by default as identity
    primary key,
  code         varchar(255),
  libelle      varchar(255) not null
    constraint uk5qnbuviywmlttiympkaceoo4s
      unique,
  categorie_id bigint       not null
    constraint fkkl1kdhwi96mrybwm5hw8sofhv
      references categorie
);

alter table famille_produit
  owner to warehouse;

create table form_produit
(
  id      bigint generated by default as identity
    primary key,
  libelle varchar(255) not null
    constraint ukdebj7ueu4wsokhi8ptd8emwht
      unique
);

alter table form_produit
  owner to warehouse;

create table gamme_produit
(
  id      bigint generated by default as identity
    primary key,
  code    varchar(255),
  libelle varchar(255) not null
    constraint uk1r9jeo0jvdg5pjhyvl2gnf2do
      unique
);

alter table gamme_produit
  owner to warehouse;

create table groupe_fournisseur
(
  id                       bigint generated by default as identity
    primary key,
  addresspostale           varchar(255),
  code_office_pharma_ml    varchar(50),
  code_recepteur_pharma_ml varchar(50),
  email                    varchar(255),
  id_recepteur_pharma_ml   varchar(50),
  libelle                  varchar(255) not null
    constraint ukp0jg383si04bm4we9c61c6mn
      unique,
  num_faxe                 varchar(255),
  odre                     integer      not null,
  tel                      varchar(255),
  url_pharma_ml            varchar(150)
);

alter table groupe_fournisseur
  owner to warehouse;

create table fournisseur
(
  id                      bigint generated by default as identity
    primary key,
  addresse_postal         varchar(255),
  code                    varchar(70)  not null,
  identifiant_repartiteur varchar(255),
  libelle                 varchar(255) not null
    constraint uk97y5ak5ond8qgcml87p1wpk5e
      unique,
  mobile                  varchar(255),
  num_faxe                varchar(255),
  phone                   varchar(255),
  site                    varchar(255),
  groupe_pournisseur_id   bigint       not null
    constraint fkosgt149ybxb817j3f0wnoj6ir
      references groupe_fournisseur
);

alter table fournisseur
  owner to warehouse;

create table fournisseur_produit
(
  id                 bigint generated by default as identity
    primary key,
  code_cip           varchar(255) not null,
  created_date       timestamp(6),
  last_modified_date timestamp(6),
  prix_achat         integer      not null,
  prix_uni           integer      not null,
  fournisseur_id     bigint       not null
    constraint fk7ovp4hph1va6aiw0hrjb6bo5b
      references fournisseur,
  produit_id         bigint       not null,
  constraint uke88lr5v2edh60cq97jrtdgx14
    unique (produit_id, fournisseur_id),
  constraint ukaqrs8apy7lun5q6bicwmolxrr
    unique (code_cip, fournisseur_id)
);

alter table fournisseur_produit
  owner to warehouse;

create index code_cip_index
  on fournisseur_produit (code_cip);

create table groupe_tiers_payant
(
  id                 bigint generated by default as identity
    primary key,
  adresse            varchar(200),
  name               varchar(100) not null
    constraint uk7s14b63vib0vg70p8cl4gvyn1
      unique,
  ordre_tris_facture varchar(255)
    constraint groupe_tiers_payant_ordre_tris_facture_check
      check ((ordre_tris_facture)::text = ANY
             ((ARRAY ['DATE_FACTURE'::character varying, 'DATE_FACTURE_DESC'::character varying, 'CODE_FACTURE'::character varying, 'TAUX'::character varying, 'MONTANT'::character varying, 'NOM_TIER'::character varying])::text[])),
  telephone          varchar(15),
  telephone_fixe     varchar(15)
);

alter table groupe_tiers_payant
  owner to warehouse;

create table historique_inventaire
(
  id                         bigint       not null
    primary key,
  created_at                 timestamp(6) not null,
  description                varchar(255) not null,
  gap_amount                 bigint,
  gap_cost                   bigint,
  inventory_amount_after     bigint       not null,
  inventory_amount_begin     bigint       not null,
  inventory_value_cost_after bigint       not null,
  inventory_value_cost_begin bigint       not null
);

alter table historique_inventaire
  owner to warehouse;

create table importation_echouee
(
  id          bigint generated by default as identity
    primary key,
  created     timestamp(6) not null,
  is_commande boolean      not null,
  objectid    bigint
);

alter table importation_echouee
  owner to warehouse;

create table importation_echouee_ligne
(
  id                   bigint generated by default as identity
    primary key,
  code_tva             integer,
  date_peremption      date,
  prix_achat           integer
    constraint importation_echouee_ligne_prix_achat_check
      check (prix_achat >= 0),
  prix_un              integer
    constraint importation_echouee_ligne_prix_un_check
      check (prix_un >= 0),
  produit_cip          varchar(255),
  produit_ean          varchar(255),
  quantity_received    integer
    constraint importation_echouee_ligne_quantity_received_check
      check (quantity_received >= 0),
  ug                   integer
    constraint importation_echouee_ligne_ug_check
      check (ug >= 0),
  importationechoue_id bigint not null
    constraint fkla874wpirbo34df0ccvjfp3vk
      references importation_echouee
);

alter table importation_echouee_ligne
  owner to warehouse;

create table laboratoire
(
  id      bigint generated by default as identity
    primary key,
  libelle varchar(255) not null
    constraint ukch0c4o3olc65u3yap006nxq0i
      unique
);

alter table laboratoire
  owner to warehouse;

create table magasin
(
  id                  bigint generated by default as identity
    primary key,
  address             varchar(255),
  compte_bancaire     varchar(255),
  compte_contribuable varchar(255),
  email               varchar(255),
  full_name           varchar(255) not null
    constraint ukjn6wxi7t8rmrg6rbcemf4yr1h
      unique,
  name                varchar(255) not null
    constraint ukjj7fulne1dmx3boof0itbmj8n
      unique,
  note                varchar(255),
  num_comptable       varchar(255),
  phone               varchar(255),
  registre            varchar(255),
  registre_imposition varchar(255),
  type_magasin        varchar(20)  not null
    constraint magasin_type_magasin_check
      check ((type_magasin)::text = ANY
             ((ARRAY ['OFFICINE'::character varying, 'DEPOT'::character varying, 'DEPOT_AGGREE'::character varying])::text[])),
  welcome_message     varchar(255)
);

alter table magasin
  owner to warehouse;

create table app_user
(
  id                   bigint generated by default as identity
    primary key,
  created_by           varchar(50),
  created_date         timestamp(6),
  last_modified_by     varchar(50),
  last_modified_date   timestamp(6),
  action_authority_key varchar(255),
  activated            boolean     not null,
  activation_key       varchar(20),
  email                varchar(254)
    constraint uk1j9d9a06i600gd43uu3km82jw
      unique,
  first_name           varchar(50),
  image_url            varchar(256),
  lang_key             varchar(10),
  last_name            varchar(50),
  login                varchar(50) not null
    constraint ukirayhia1ygarvmv7apksctnqn
      unique,
  password_hash        varchar(60) not null,
  reset_date           timestamp(6),
  reset_key            varchar(20),
  magasin_id           bigint      not null
    constraint fktm23v341ixr5hd00o6hdfgly1
      references magasin
);

alter table app_user
  owner to warehouse;

create table app_configuration
(
  name            varchar(50)  not null
    primary key,
  created         timestamp(6),
  description     varchar(255) not null,
  other_value     varchar(255),
  updated         timestamp(6),
  value           varchar(255) not null,
  value_type      varchar(20)  not null
    constraint app_configuration_value_type_check
      check ((value_type)::text = ANY
             ((ARRAY ['STRING'::character varying, 'NUMBER'::character varying, 'BOOLEAN'::character varying, 'DATE'::character varying, 'TIME'::character varying, 'DATE_TIME'::character varying, 'LIST'::character varying, 'MAP'::character varying, 'COLOR'::character varying, 'FONT'::character varying])::text[])),
  validated_by_id bigint
    constraint fkawtp1o36ex1mrcqju2i4hefn9
      references app_user
);

alter table app_configuration
  owner to warehouse;

create table cash_register
(
  id              bigint generated by default as identity
    primary key,
  begin_time      timestamp(6) not null,
  cancele_amount  integer,
  created         timestamp(6) not null,
  end_time        timestamp(6),
  final_amount    bigint,
  init_amount     bigint       not null,
  statut          varchar(255) not null
    constraint cash_register_statut_check
      check ((statut)::text = ANY
             ((ARRAY ['OPEN'::character varying, 'CLOSED'::character varying, 'VALIDATED'::character varying, 'PENDING'::character varying])::text[])),
  updated         timestamp(6) not null,
  updated_user_id bigint
    constraint fkmsgotyohbwcywmsdl87xf0lbg
      references app_user,
  user_id         bigint       not null
    constraint fkb9xkea9vcojt3s3gtryv958nm
      references app_user
);

alter table cash_register
  owner to warehouse;

create table cash_fund
(
  id               bigint generated by default as identity
    primary key,
  amount           integer      not null,
  cash_fund_type   varchar(255) not null
    constraint cash_fund_cash_fund_type_check
      check ((cash_fund_type)::text = ANY
             ((ARRAY ['AUTO'::character varying, 'MANUAL'::character varying])::text[])),
  created          timestamp(6) not null,
  statut           varchar(255) not null
    constraint cash_fund_statut_check
      check ((statut)::text = ANY
             ((ARRAY ['PROCESSING'::character varying, 'VALIDETED'::character varying, 'PENDING'::character varying])::text[])),
  updated          timestamp(6),
  cash_register_id bigint
    constraint ukkw6trpuogcthcnuixl416p6tc
      unique
    constraint fks2oiwqxkralpsy81kk2afnj60
      references cash_register,
  user_id          bigint       not null
    constraint fkr04stlokx32xxbr1plct51140
      references app_user,
  validated_by_id  bigint
    constraint fkneh5giwbnwc3ts7254uui4aus
      references app_user
);

alter table cash_fund
  owner to warehouse;

create table commande
(
  id                             bigint generated by default as identity
    primary key,
  created_at                     timestamp(6) not null,
  discount_amount                integer default 0,
  final_amount                   integer,
  gross_amount                   integer      not null,
  has_been_submitted_to_pharmaml boolean default false,
  ht_amount                      integer,
  order_amount                   integer,
  order_reference                varchar(20),
  order_status                   varchar(10)  not null
    constraint commande_order_status_check
      check ((order_status)::text = ANY
             ((ARRAY ['REQUESTED'::character varying, 'RECEIVED'::character varying, 'CLOSED'::character varying])::text[])),
  paiment_status                 varchar(255) not null
    constraint commande_paiment_status_check
      check ((paiment_status)::text = ANY
             ((ARRAY ['UNPAID'::character varying, 'PAID'::character varying, 'NOT_SOLD'::character varying])::text[])),
  receipt_date                   date,
  receipt_reference              varchar(20),
  tax_amount                     integer,
  receipt_type                   varchar(255) not null
    constraint commande_receipt_type_check
      check ((receipt_type)::text = ANY
             ((ARRAY ['DIRECT'::character varying, 'ORDER'::character varying])::text[])),
  updated_at                     timestamp(6) not null,
  fournisseur_id                 bigint       not null
    constraint fke9u9pamnss31e4pn6twt1yk0q
      references fournisseur,
  user_id                        bigint       not null
    constraint fkro08of7obw2mwehrxc5ueous4
      references app_user,
  constraint ukaiq6eeql26l3q8gm9k1p810lr
    unique (receipt_reference, fournisseur_id)
);

alter table commande
  owner to warehouse;

create index order_status_index
  on commande (order_status);

create index receipt_paiment_status_index
  on commande (paiment_status);

create index receipt_reference_index
  on commande (receipt_reference);

create table importation
(
  id                 bigint generated by default as identity
    primary key,
  created_at         timestamp(6) not null,
  errorsize          integer      not null,
  importation_status varchar(255) not null
    constraint importation_importation_status_check
      check ((importation_status)::text = ANY
             ((ARRAY ['PROCESSING'::character varying, 'INTERRUPTED'::character varying, 'COMPLETED_ERRORS'::character varying, 'FAIL'::character varying, 'COMPLETED'::character varying])::text[])),
  importation_type   varchar(255) not null
    constraint importation_importation_type_check
      check ((importation_type)::text = ANY
             ((ARRAY ['STOCK_PRODUIT'::character varying, 'VENTE'::character varying, 'FICHE_ARTICLE'::character varying, 'TIERS_PAYANT'::character varying, 'CLIENTS'::character varying])::text[])),
  ligne_en_erreur    json,
  size               integer      not null,
  totalzise          integer      not null,
  updated_at         timestamp(6),
  user_id            bigint       not null
    constraint fkeoy3wlw28bm9x9vuqa9sgur2e
      references app_user
);

alter table importation
  owner to warehouse;

create index importation_status_index
  on importation (importation_status);

create index importation_type_index
  on importation (importation_type);

create index created_at_index
  on importation (created_at);

create table logs
(
  id               bigint generated by default as identity
    primary key,
  comments         varchar(255) not null,
  created_at       timestamp(6) not null,
  indentity_key    varchar(255) not null,
  new_object       text,
  old_object       text,
  transaction_type varchar(255) not null
    constraint logs_transaction_type_check
      check ((transaction_type)::text = ANY
             ((ARRAY ['SALE'::character varying, 'DELETE_SALE'::character varying, 'CANCEL_SALE'::character varying, 'REAPPRO'::character varying, 'AJUSTEMENT_IN'::character varying, 'AJUSTEMENT_OUT'::character varying, 'INVENTAIRE'::character varying, 'SUPPRESSION'::character varying, 'COMMANDE'::character varying, 'DECONDTION_IN'::character varying, 'DECONDTION_OUT'::character varying, 'CREATE_PRODUCT'::character varying, 'UPDATE_PRODUCT'::character varying, 'DELETE_PRODUCT'::character varying, 'DISABLE_PRODUCT'::character varying, 'ENABLE_PRODUCT'::character varying, 'MODIFICATION_PRIX_PRODUCT'::character varying, 'MOUVEMENT_STOCK_IN'::character varying, 'MOUVEMENT_STOCK_OUT'::character varying, 'FORCE_STOCK'::character varying, 'MODIFICATION_PRIX_PRODUCT_A_LA_VENTE'::character varying, 'ENTREE_STOCK'::character varying, 'ACTIVATION_PRIVILEGE'::character varying, 'RETRAIT_PERIME'::character varying, 'MODIFICATION_DATE_DE_VENTE'::character varying, 'MODIFICATION_INFO_CLIENT'::character varying])::text[])),
  user_id          bigint       not null
    constraint fk7y2dakyjyalp2bw8eada4hwnq
      references app_user
);

alter table logs
  owner to warehouse;

create index transaction_type_index
  on logs (transaction_type);

create index indentitykey_index
  on logs (indentity_key);

create table menu
(
  id               bigint generated by default as identity
    primary key,
  enable           boolean      not null,
  icon_java_client varchar(255),
  icon_web         varchar(255),
  libelle          varchar(255) not null,
  name             varchar(70)  not null
    constraint ukm05sb1hgsv38qjb4ksyh5eat2
      unique,
  ordre            integer      not null,
  racine           boolean      not null,
  type_menu        varchar(15)  not null
    constraint menu_type_menu_check
      check ((type_menu)::text = ANY
             ((ARRAY ['WEB'::character varying, 'JAVA_CLIENT'::character varying, 'ALL'::character varying, 'MOBILE'::character varying])::text[])),
  parent_id        bigint
    constraint fkgeupubdqncc1lpgf2cn4fqwbc
      references menu
);

alter table menu
  owner to warehouse;

create table authority_menu
(
  authority_name varchar(50) not null
    constraint fkrfrj2p0bpnosephpj61lmi9np
      references authority,
  menu_id        bigint      not null
    constraint fkldi65w2wsgdge8qfsjkmge2sl
      references menu,
  primary key (authority_name, menu_id)
);

alter table authority_menu
  owner to warehouse;

create table motif_ajustement
(
  id      bigint generated by default as identity
    primary key,
  libelle varchar(255) not null
    constraint ukjcn7824hyqd0s0yml6cemqxj1
      unique
);

alter table motif_ajustement
  owner to warehouse;

create table motif_retour_produit
(
  id      bigint generated by default as identity
    primary key,
  libelle varchar(255) not null
    constraint ukkhj7gugyhyfcgw17t02j2mxlr
      unique
);

alter table motif_retour_produit
  owner to warehouse;

create table payment_mode
(
  code          varchar(50)  not null
    primary key,
  enable        boolean      not null,
  payment_group varchar(255) not null
    constraint payment_mode_payment_group_check
      check ((payment_group)::text = ANY
             ((ARRAY ['CASH'::character varying, 'CREDIT'::character varying, 'MOBILE'::character varying, 'CB'::character varying, 'CHEQUE'::character varying, 'VIREMENT'::character varying, 'CAUTION'::character varying])::text[])),
  iconurl       varchar(255),
  libelle       varchar(255) not null
    constraint uktfqn29lfkm2lkujuptvoiiyki
      unique,
  ordre_tri     smallint     not null
);

alter table payment_mode
  owner to warehouse;

create table cash_register_item
(
  id                bigint generated by default as identity
    primary key,
  amount            bigint,
  type_transaction  varchar(255) not null
    constraint cash_register_item_type_transaction_check
      check ((type_transaction)::text = ANY
             ((ARRAY ['CASH_SALE'::character varying, 'CREDIT_SALE'::character varying, 'VENTES_DEPOTS'::character varying, 'VENTES_DEPOTS_AGREE'::character varying, 'REGLEMENT_DIFFERE'::character varying, 'REGLEMENT_TIERS_PAYANT'::character varying, 'SORTIE_CAISSE'::character varying, 'ENTREE_CAISSE'::character varying, 'FONDS_CAISSE'::character varying, 'REGLMENT_FOURNISSEUR'::character varying, 'CAUTION'::character varying])::text[])),
  cash_register_id  bigint       not null
    constraint fkg7uv0e0n4k52n11ryawhjueef
      references cash_register,
  payment_mode_code varchar(50)  not null
    constraint fk27y8m06p8783unjcod1i5p97x
      references payment_mode,
  constraint ukovfm6oebekfa7449p67yvnnpf
    unique (cash_register_id, payment_mode_code, type_transaction)
);

alter table cash_register_item
  owner to warehouse;

create table persistent_audit_event
(
  event_id   bigint generated by default as identity
    primary key,
  event_date timestamp(6) with time zone,
  event_type varchar(255),
  principal  varchar(255) not null
);

alter table persistent_audit_event
  owner to warehouse;

create table persistent_audit_evt_data
(
  event_id bigint       not null
    constraint fk9ynvwlu7w4uqpjlxvk9kiscqs
      references persistent_audit_event,
  value    varchar(255),
  name     varchar(255) not null,
  primary key (event_id, name)
);

alter table persistent_audit_evt_data
  owner to warehouse;

create table persistent_token
(
  series      varchar(255) not null
    primary key,
  ip_address  varchar(39),
  token_date  date,
  token_value varchar(255) not null,
  user_agent  varchar(255),
  user_id     bigint
    constraint fkl149s6unq8u8ophk47lv2e50x
      references app_user
);

alter table persistent_token
  owner to warehouse;

create table poste
(
  id          bigint generated by default as identity
    primary key,
  address     varchar(255) not null,
  name        varchar(255) not null
    constraint ukk7d8e8fhttgpyrppl6unbvybx
      unique,
  postenumber varchar(255)
);

alter table poste
  owner to warehouse;

create index poste_name_index
  on poste (name);

create table printer
(
  id                    bigint generated by default as identity
    primary key,
  address               varchar(255),
  length                integer             not null,
  margin_left_and_right integer default 10  not null,
  margin_top            integer default 15  not null,
  name                  varchar(255)        not null
    constraint ukrr7bfntxwxqe91dsa9458f582
      unique,
  width                 integer default 576 not null,
  poste_id              bigint              not null
    constraint fkcip3p5i9uwm6mgqpsnrfk5vcu
      references poste,
  constraint ukh8bxb2mqx8w24n0jh4vymkk0
    unique (name, poste_id)
);

alter table printer
  owner to warehouse;

create index name_index
  on printer (name);

create table privilege
(
  name    varchar(100) not null
    primary key,
  libelle varchar(255) not null,
  menu_id bigint       not null
    constraint fkqckdmdk8jouw4r8o53uq88xlo
      references menu
);

alter table privilege
  owner to warehouse;

create table authority_privilege
(
  id             bigint generated by default as identity
    primary key,
  authority_name varchar(50)  not null
    constraint fk9prep679f0xewrgodv1lqstl7
      references authority,
  privilege_name varchar(100) not null
    constraint fk5xavalsq2c8nngb47jbgsl7mj
      references privilege,
  constraint ukpuc964qxatpndyv71vc7pds1f
    unique (privilege_name, authority_name)
);

alter table authority_privilege
  owner to warehouse;

create table products_to_destroy
(
  id                     bigint generated by default as identity
    primary key,
  created                timestamp(6) not null,
  datedestuction         date,
  dateperemption         date         not null,
  destroyed              boolean,
  editing                boolean,
  numlot                 varchar(255) not null,
  prixachat              integer      not null,
  prixunit               integer      not null,
  quantity               integer      not null
    constraint products_to_destroy_quantity_check
      check (quantity >= 1),
  stock_initial          integer      not null
    constraint products_to_destroy_stock_initial_check
      check (stock_initial >= 1),
  updated                timestamp(6),
  fournisseur_produit_id bigint       not null
    constraint fkha5oytdyjc9370026d7y6fykx
      references fournisseur_produit,
  magasin_id             bigint       not null
    constraint fktoo8qyrwf562lkwmltj62ev3b
      references magasin,
  user_id                bigint       not null
    constraint fkc1twe32wdt2l7v2mthg8tlebx
      references app_user
);

alter table products_to_destroy
  owner to warehouse;

create table reference
(
  id             bigint generated by default as identity
    primary key,
  mvt_date       date         not null,
  num            varchar(255) not null,
  number_transac integer      not null
    constraint reference_number_transac_check
      check (number_transac >= 0),
  d_type         integer      not null,
  constraint ukpj0iecdrn6o15jiuqnbj5l80o
    unique (mvt_date, d_type, num)
);

alter table reference
  owner to warehouse;

create table remise
(
  dtype        varchar(31)          not null
    constraint remise_dtype_check
      check ((dtype)::text = ANY
             ((ARRAY ['Remise'::character varying, 'RemiseClient'::character varying, 'RemiseProduit'::character varying])::text[])),
  id           bigint generated by default as identity
    primary key,
  enable       boolean default true not null,
  libelle      varchar(100),
  remise_value real
);

alter table remise
  owner to warehouse;

create table customer
(
  dtype               varchar(31)  not null
    constraint customer_dtype_check
      check ((dtype)::text = ANY
             ((ARRAY ['Customer'::character varying, 'AssuredCustomer'::character varying, 'UninsuredCustomer'::character varying])::text[])),
  id                  bigint generated by default as identity
    primary key,
  code                varchar(255) not null
    constraint ukrm1bp9bhtiih5foj17t8l500j
      unique,
  created_at          timestamp(6) not null,
  email               varchar(255),
  first_name          varchar(255) not null,
  last_name           varchar(255) not null,
  phone               varchar(255),
  status              varchar(255) not null
    constraint customer_status_check
      check ((status)::text = ANY
             ((ARRAY ['ENABLE'::character varying, 'DISABLE'::character varying, 'DELETED'::character varying, 'CLOSED'::character varying])::text[])),
  type_assure         varchar(15)  not null
    constraint customer_type_assure_check
      check ((type_assure)::text = ANY
             ((ARRAY ['PRINCIPAL'::character varying, 'AYANT_DROIT'::character varying])::text[])),
  updated_at          timestamp(6) not null,
  dat_naiss           date,
  num_ayant_droit     varchar(100),
  sexe                varchar(255),
  remise_client_id    bigint
    constraint fk8qi44u4eqwuqlvq67cmffahpw
      references remise,
  assure_principal_id bigint
    constraint fkb1cv4y9rq1gego4buaykin5wh
      references customer
);

alter table customer
  owner to warehouse;

create index client_first_name_index
  on customer (first_name);

create index client_status_index
  on customer (status);

create index client_last_name_index
  on customer (last_name);

create table customer_account
(
  id           bigint generated by default as identity
    primary key,
  account_type varchar(255) not null
    constraint customer_account_account_type_check
      check ((account_type)::text = ANY
             ((ARRAY ['CAUTION'::character varying, 'CARNET'::character varying])::text[])),
  balance      integer      not null,
  created_at   timestamp(6) not null,
  enabled      boolean      not null,
  updated_at   timestamp(6) not null,
  customer_id  bigint       not null
    constraint fk6c5oqutth35p5vmw0svg56msa
      references customer
);

alter table customer_account
  owner to warehouse;

create table grille_remise
(
  id                bigint generated by default as identity
    primary key,
  code              varchar(10)          not null
    constraint grille_remise_code_un_index
      unique
    constraint grille_remise_code_check
      check ((code)::text = ANY
             ((ARRAY ['NONE'::character varying, 'CODE_12'::character varying, 'CODE_13'::character varying, 'CODE_14'::character varying, 'CODE_15'::character varying, 'CODE_16'::character varying, 'CODE_17'::character varying, 'CODE_18'::character varying, 'CODE_19'::character varying, 'CODE_20'::character varying, 'CODE_21'::character varying, 'CODE_22'::character varying, 'CODE_23'::character varying, 'CODE_24'::character varying, 'CODE_25'::character varying, 'CODE_26'::character varying, 'CODE_27'::character varying, 'CODE_28'::character varying, 'CODE_29'::character varying])::text[])),
  enable            boolean default true not null,
  remise_value      real                 not null,
  remise_produit_id bigint               not null
    constraint fk7vy9l2sxkb174hmjojs1k3k1a
      references remise,
  constraint remise_produit_id_code_un_index
    unique (code, remise_produit_id)
);

alter table grille_remise
  owner to warehouse;

create table revinfo
(
  rev      integer not null
    primary key,
  revtstmp bigint
);

alter table revinfo
  owner to warehouse;

create table produit_aud
(
  id                      bigint  not null,
  rev                     integer not null
    constraint fks1uj5x4oki7a0vwrgyrfq6kj1
      references revinfo,
  revtype                 smallint,
  categorie               varchar(255)
    constraint produit_aud_categorie_check
      check ((categorie)::text = ANY
             ((ARRAY ['A'::character varying, 'B'::character varying, 'C'::character varying])::text[])),
  check_expiry_date       boolean default false,
  code_ean                varchar(255),
  code_ean_labo           varchar(255),
  code_remise             varchar(6)
    constraint produit_aud_code_remise_check
      check ((code_remise)::text = ANY
             ((ARRAY ['NONE'::character varying, 'CODE_0'::character varying, 'CODE_1'::character varying, 'CODE_2'::character varying, 'CODE_3'::character varying, 'CODE_4'::character varying, 'CODE_5'::character varying, 'CODE_6'::character varying, 'CODE_7'::character varying, 'CODE_8'::character varying])::text[])),
  cost_amount             integer,
  created_at              timestamp(6),
  deconditionnable        boolean,
  item_cost_amount        integer,
  item_qty                integer,
  item_regular_unit_price integer,
  libelle                 varchar(255),
  net_unit_price          integer,
  perime_at               date,
  prix_mnp                integer default 0,
  qty_appro               integer default 0,
  qty_seuil_mini          integer default 0,
  regular_unit_price      integer,
  scheduled               boolean default false,
  seuil_decond            integer,
  seuil_reassort          integer,
  status                  varchar(255)
    constraint produit_aud_status_check
      check ((status)::text = ANY
             ((ARRAY ['ENABLE'::character varying, 'DISABLE'::character varying, 'DELETED'::character varying, 'CLOSED'::character varying])::text[])),
  type_produit            varchar(255)
    constraint produit_aud_type_produit_check
      check ((type_produit)::text = ANY
             ((ARRAY ['DETAIL'::character varying, 'PACKAGE'::character varying])::text[])),
  updated_at              timestamp(6),
  tableau_id              bigint,
  primary key (rev, id)
);

alter table produit_aud
  owner to warehouse;

create table sales
(
  dtype                           varchar(31)  not null
    constraint sales_dtype_check
      check ((dtype)::text = ANY
             ((ARRAY ['Sales'::character varying, 'CashSale'::character varying, 'ThirdPartySales'::character varying, 'VenteDepot'::character varying, 'VenteDepotAgree'::character varying])::text[])),
  id                              bigint       not null,
  sale_date                       date         not null,
  amount_to_be_paid               integer      not null,
  amount_to_be_taken_into_account integer      not null,
  canceled                        boolean      not null,
  ca                              varchar(255) not null
    constraint sales_ca_check
      check ((ca)::text = ANY
             ((ARRAY ['CA'::character varying, 'CA_DEPOT'::character varying, 'CALLEBASE'::character varying, 'TO_IGNORE'::character varying])::text[])),
  commentaire                     varchar(255),
  copy                            boolean      not null,
  created_at                      timestamp(6) not null,
  differe                         boolean      not null,
  discount_amount                 integer      not null,
  effective_update_date           timestamp(6) not null,
  imported                        boolean      not null,
  monnaie                         integer      not null,
  nature_vente                    varchar(15)  not null
    constraint sales_nature_vente_check
      check ((nature_vente)::text = ANY
             ((ARRAY ['COMPTANT'::character varying, 'ASSURANCE'::character varying, 'CARNET'::character varying])::text[])),
  number_transaction              varchar(255) not null,
  origine_vente                   varchar(255) not null
    constraint sales_origine_vente_check
      check ((origine_vente)::text = ANY
             ((ARRAY ['DIRECT'::character varying, 'DIVIS'::character varying, 'IMPORTE'::character varying])::text[])),
  payment_status                  varchar(15)  not null
    constraint sales_payment_status_check
      check ((payment_status)::text = ANY
             ((ARRAY ['PAYE'::character varying, 'IMPAYE'::character varying, 'ALL'::character varying])::text[])),
  payroll_amount                  integer      not null,
  rest_to_pay                     integer      not null,
  sales_amount                    integer      not null,
  statut                          varchar(255) not null
    constraint sales_statut_check
      check ((statut)::text = ANY
             ((ARRAY ['PROCESSING'::character varying, 'PENDING'::character varying, 'CLOSED'::character varying, 'ACTIVE'::character varying, 'DESABLED'::character varying, 'CANCELED'::character varying, 'REMOVE'::character varying])::text[])),
  to_ignore                       boolean      not null,
  tvaembeded                      varchar(100),
  type_prescription               varchar(15)  not null
    constraint sales_type_prescription_check
      check ((type_prescription)::text = ANY
             ((ARRAY ['PRESCRIPTION'::character varying, 'CONSEIL'::character varying, 'DEPOT'::character varying])::text[])),
  updated_at                      timestamp(6) not null,
  has_price_option                boolean default false,
  num_bon                         varchar(50),
  part_assure                     integer default 0,
  part_tiers_payant               integer default 0,
  caisse_id                       bigint
    constraint fkol9pmxkqx60x3slvu2ijoex43
      references poste,
  caissier_id                     bigint       not null
    constraint fk9r7prudp7yjtu58qghl19mkys
      references app_user,
  canceledsale_id                 bigint,
  canceledsale_sale_date          date,
  cash_register_id                bigint
    constraint fk8d36jdbjf6kif9hexfg1321s
      references cash_register,
  customer_id                     bigint
    constraint fk72ep16wuoj7nllumicmk2ie3s
      references customer,
  lastcaisse_id                   bigint
    constraint fk8def8xcxhikgkjyjimrumwrry
      references poste,
  lastuseredit_id                 bigint       not null
    constraint fklxb35l9jpvad0by7bwqcfwfaj
      references app_user,
  magasin_id                      bigint       not null
    constraint fkd98rul87ffrih39pgn4xh0x3i
      references magasin,
  remise_id                       bigint
    constraint fkjjnyagbe68u4fn7k5btsuqqoh
      references remise,
  seller_id                       bigint       not null
    constraint fkfng5ffgc7nl6qk6cfaje31d81
      references app_user,
  user_id                         bigint       not null
    constraint fkddv1s272fec8808sko5asovvh
      references app_user,
  account_id                      bigint
    constraint fk1nngwi74wjuy96pbjmr6k9cmc
      references customer_account,
  ayant_droit_id                  bigint
    constraint fkpyxoaae6i92epy849wvdfdlke
      references customer,
  depot_id                        bigint
    constraint fk21r69rm6qvqoecj2qn8dodi7w
      references magasin,
  depot_agree_id                  bigint
    constraint fk8jn843nshbh0rxx99oil0xbev
      references magasin,
  primary key (id, sale_date),
  constraint fk4jit3x91n2b4rtc60laequ85q
    foreign key (canceledsale_id, canceledsale_sale_date) references sales,
  constraint sales_check
    check (((dtype)::text <> 'ThirdPartySales'::text) OR (has_price_option IS NOT NULL))
) PARTITION BY RANGE (sale_date);

alter table sales
  owner to warehouse;

create index vente_dtype_index
  on sales (dtype);

create index vente_sale_date_index
  on sales (sale_date);

create index vente_statut_index
  on sales (statut);

create index vente_number_transaction_index
  on sales (number_transaction);

create index vente_ca_index
  on sales (ca);

create index vente_imported_index
  on sales (imported);

create index vente_to_ignore_index
  on sales (to_ignore);

create index vente_payment_status_index
  on sales (payment_status);

create index vente_nature_vente_index
  on sales (nature_vente);

create table stock_produit_aud
(
  id               bigint  not null,
  rev              integer not null
    constraint fkij7xuydesbe7v244123qfdpg7
      references revinfo,
  revtype          smallint,
  created_at       timestamp(6),
  last_modified_by varchar(50),
  qty_stock        integer,
  qty_ug           integer,
  qty_virtual      integer,
  updated_at       timestamp(6),
  produit_id       bigint,
  storage_id       bigint,
  primary key (rev, id)
);

alter table stock_produit_aud
  owner to warehouse;

create table storage
(
  id           bigint generated by default as identity
    primary key,
  name         varchar(255) not null
    constraint uk5fe37ity4pov1usxcqr3b03nd
      unique,
  storage_type varchar(255) not null
    constraint storage_storage_type_check
      check ((storage_type)::text = ANY
             ((ARRAY ['PRINCIPAL'::character varying, 'SAFETY_STOCK'::character varying, 'POINT_DE_VENTE'::character varying])::text[])),
  magasin_id   bigint       not null
    constraint fkn1jj5tjhmgepsc4nwqsf1db9r
      references magasin,
  constraint uk8hgum32rc3fpeusaibc8e608s
    unique (storage_type, magasin_id)
);

alter table storage
  owner to warehouse;

create table ajust
(
  id          bigint generated by default as identity
    primary key,
  commentaire varchar(255),
  date_mtv    timestamp(6) not null,
  statut      varchar(255) not null
    constraint ajust_statut_check
      check ((statut)::text = ANY ((ARRAY ['PENDING'::character varying, 'CLOSED'::character varying])::text[])),
  storage_id  bigint       not null
    constraint fkbkc3o0mx6q4799rpbpgcd0e89
      references storage,
  user_id     bigint       not null
    constraint fk9u5fl43tb91bls64egt145e21
      references app_user
);

alter table ajust
  owner to warehouse;

create table rayon
(
  id         bigint generated by default as identity
    primary key,
  code       varchar(255) not null,
  to_exclude boolean,
  libelle    varchar(255) not null,
  storage_id bigint       not null
    constraint fk4vkox6f9rrh2asaji8wwu7ruu
      references storage,
  constraint uk6c4mu7mhf4f0shby67qh7g0b7
    unique (libelle, storage_id),
  constraint ukc7q7hrcb4fgtu9nx1hv84amdx
    unique (code, storage_id)
);

alter table rayon
  owner to warehouse;

create table store_inventory
(
  id                         bigint generated by default as identity
    primary key,
  created_at                 timestamp(6) not null,
  description                varchar(255),
  gap_amount                 integer,
  gap_cost                   integer,
  inventory_amount_after     bigint       not null,
  inventory_amount_begin     bigint       not null,
  inventory_category         varchar(255) not null
    constraint store_inventory_inventory_category_check
      check ((inventory_category)::text = ANY
             ((ARRAY ['STORAGE'::character varying, 'RAYON'::character varying, 'MAGASIN'::character varying, 'FAMILLY'::character varying])::text[])),
  inventory_type             varchar(255) not null
    constraint store_inventory_inventory_type_check
      check ((inventory_type)::text = ANY
             ((ARRAY ['MANUEL'::character varying, 'PROGRAMME'::character varying])::text[])),
  inventory_value_cost_after bigint       not null,
  inventory_value_cost_begin bigint       not null,
  statut                     varchar(255) not null
    constraint store_inventory_statut_check
      check ((statut)::text = ANY
             ((ARRAY ['CREATE'::character varying, 'PROCESSING'::character varying, 'CLOSED'::character varying])::text[])),
  updated_at                 timestamp(6) not null,
  rayon_id                   bigint
    constraint fknwue82ru709xwwxkj5if2v6qq
      references rayon,
  storage_id                 bigint
    constraint fk88teyake2uy873xolysdpwfl7
      references storage,
  user_id                    bigint       not null
    constraint fkar4j5illidf717kb6wnstjfu
      references app_user
);

alter table store_inventory
  owner to warehouse;

create table suggestion
(
  id                   bigint generated by default as identity
    primary key,
  created_at           timestamp(6) not null,
  statut               varchar(15)
    constraint suggestion_statut_check
      check ((statut)::text = ANY ((ARRAY ['OPEN'::character varying, 'CLOSED'::character varying])::text[])),
  suggession_reference varchar(255),
  type_suggession      varchar(10)
    constraint suggestion_type_suggession_check
      check ((type_suggession)::text = ANY
             ((ARRAY ['AUTO'::character varying, 'MANUELLE'::character varying])::text[])),
  updated_at           timestamp(6) not null,
  fournisseur_id       bigint       not null
    constraint fkk2x8077hbpyca66ww9vgam3ae
      references fournisseur,
  lastuseredit_id      bigint
    constraint fkpgm53d002uyiwssstrtfp4syn
      references app_user,
  magasin_id           bigint       not null
    constraint fkba6svq3le6ej41368lpg26w2u
      references magasin
);

alter table suggestion
  owner to warehouse;

create index type_suggession_index
  on suggestion (type_suggession);

create table suggestion_line
(
  id                     bigint generated by default as identity
    primary key,
  created_at             timestamp(6) not null,
  quantity               integer,
  updated_at             timestamp(6) not null,
  fournisseur_produit_id bigint       not null
    constraint fkjtyays176u1dvjkafkf798nua
      references fournisseur_produit,
  suggestion_id          bigint       not null
    constraint fkcac8uukf3y1701wji8aey0eck
      references suggestion,
  constraint uktc1xgbkc01q1yrxe0nif3ajtk
    unique (suggestion_id, fournisseur_produit_id)
);

alter table suggestion_line
  owner to warehouse;

create table tableau
(
  id     bigint generated by default as identity
    primary key,
  code   varchar(255) not null
    constraint ukdhugqone5nf7sq7t9c178lfb5
      unique,
  valeur integer      not null
);

alter table tableau
  owner to warehouse;

create index code_index
  on tableau (code);

create table ticketing
(
  id                 bigint generated by default as identity
    primary key,
  created            timestamp(6) not null,
  numberof1          integer      not null,
  numberof10         integer      not null,
  numberof100hundred integer      not null,
  numberof10thousand integer      not null,
  numberof1thousand  integer      not null,
  numberof200hundred integer      not null,
  numberof25         integer      not null,
  numberof2thousand  integer      not null,
  numberof5          integer      not null,
  numberof50         integer      not null,
  numberof500hundred integer      not null,
  numberof5thousand  integer      not null,
  otheramount        integer      not null,
  totalamount        bigint       not null,
  cash_register_id   bigint       not null
    constraint ukck44ngcp2bue83xo845mbu962
      unique
    constraint fkmq8ij1eptnvb7xprhsf8w3ys1
      references cash_register
);

alter table ticketing
  owner to warehouse;

create table tiers_payant
(
  id                        bigint generated by default as identity
    primary key,
  adresse                   varchar(200),
  to_be_exclude             boolean default false,
  categorie                 varchar(255) not null
    constraint tiers_payant_categorie_check
      check ((categorie)::text = ANY
             ((ARRAY ['ASSURANCE'::character varying, 'CARNET'::character varying, 'DEPOT'::character varying])::text[])),
  code_organisme            varchar(100),
  conso_mensuelle           bigint,
  consommation_json         jsonb,
  created                   timestamp(6) not null,
  email                     varchar(100),
  full_name                 varchar(200) not null
    constraint uk3moh75ah5g6ce1dm9n28psmvo
      unique,
  model_facture             varchar(20),
  montant_max_sur_fact      bigint,
  name                      varchar(150) not null
    constraint uksmbw04nasi7yrcjwcg95tsh6t
      unique,
  nbre_bons_max_sur_fact    integer,
  nbre_bordereau            integer,
  ncc                       varchar(100),
  plafond_absolu            boolean default false,
  plafond_absolu_client     boolean default false,
  plafond_conso             bigint,
  plafond_conso_client      integer,
  plafond_journalier_client integer,
  remise_forfaitaire        integer default 0,
  statut                    varchar(255) not null
    constraint tiers_payant_statut_check
      check ((statut)::text = ANY
             ((ARRAY ['ACTIF'::character varying, 'DISABLED'::character varying, 'LOCK'::character varying])::text[])),
  telephone                 varchar(15),
  telephone_fixe            varchar(15),
  updated                   timestamp(6) not null,
  groupe_tiers_payant_id    bigint
    constraint fkeq4f34e6hgun4oad7iuxnnrs7
      references groupe_tiers_payant,
  user_id                   bigint       not null
    constraint fkn013vt5c4d2vvmuc5ebbrg7k2
      references app_user
);

alter table tiers_payant
  owner to warehouse;

create table client_tiers_payant
(
  id                  bigint generated by default as identity
    primary key,
  conso_mensuelle     bigint,
  consommation_json   json,
  created             timestamp(6) not null,
  num                 varchar(100) not null,
  priorite            varchar(255) not null
    constraint client_tiers_payant_priorite_check
      check ((priorite)::text = ANY
             ((ARRAY ['R0'::character varying, 'R1'::character varying, 'R2'::character varying, 'R3'::character varying])::text[])),
  statut              varchar(255) not null
    constraint client_tiers_payant_statut_check
      check ((statut)::text = ANY
             ((ARRAY ['ACTIF'::character varying, 'DISABLED'::character varying, 'LOCK'::character varying])::text[])),
  taux                integer      not null,
  updated             timestamp(6) not null,
  assured_customer_id bigint       not null
    constraint fkb627stp58elnn5yel8hi27tju
      references customer,
  tierspayant_id      bigint       not null
    constraint fkspy4ixhhavqf20e6avk01jt8i
      references tiers_payant
);

alter table client_tiers_payant
  owner to warehouse;

create index client_num_index
  on client_tiers_payant (num);

create index client_statut_index
  on client_tiers_payant (statut);

create table facture_tiers_payant
(
  id                             bigint generated by default as identity
    primary key,
  created                        timestamp(6) not null,
  debutperiode                   date,
  factureprovisoire              boolean      not null,
  finperiode                     date,
  montant_regle                  integer,
  num_facture                    varchar(20)  not null
    constraint ukdpie1csuti0gr5k8upvaatx8p
      unique,
  remiseforfetaire               integer      not null,
  statut                         varchar(255) not null
    constraint facture_tiers_payant_statut_check
      check ((statut)::text = ANY
             ((ARRAY ['PAID'::character varying, 'NOT_PAID'::character varying, 'PARTIALLY_PAID'::character varying])::text[])),
  updated                        timestamp(6),
  groupe_facture_tiers_payant_id bigint
    constraint fkcfeusk9tdn2w3nkkw8wmyxwge
      references facture_tiers_payant,
  groupe_tiers_payant_id         bigint
    constraint fkku32lbuahnuhx7f249jglins9
      references groupe_tiers_payant,
  tiers_payant_id                bigint
    constraint fk64mvu1jd0r3m57m1dil45h40p
      references tiers_payant,
  user_id                        bigint       not null
    constraint fkj9kenliu2tun2h4adfuw5ysos
      references app_user
);

alter table facture_tiers_payant
  owner to warehouse;

create index num_facture_index
  on facture_tiers_payant (num_facture);

create table payment_transaction
(
  dtype                  varchar(31)  not null
    constraint payment_transaction_dtype_check
      check ((dtype)::text = ANY
             ((ARRAY ['PaymentTransaction'::character varying, 'AccountTransaction'::character varying, 'DefaultPayment'::character varying, 'DifferePayment'::character varying, 'InvoicePayment'::character varying, 'PaymentFournisseur'::character varying, 'SalePayment'::character varying])::text[])),
  id                     bigint generated by default as identity
    primary key,
  categorie_ca           varchar(255) not null
    constraint payment_transaction_categorie_ca_check
      check ((categorie_ca)::text = ANY
             ((ARRAY ['CA'::character varying, 'CA_DEPOT'::character varying, 'CALLEBASE'::character varying, 'TO_IGNORE'::character varying])::text[])),
  commentaire            varchar(255),
  created_at             timestamp(6) not null,
  credit                 boolean      not null,
  expected_amount        integer      not null,
  montant_verse          integer      not null,
  paid_amount            integer      not null,
  reel_amount            integer      not null,
  transaction_date       date         not null,
  type_transaction       varchar(255) not null
    constraint payment_transaction_type_transaction_check
      check ((type_transaction)::text = ANY
             ((ARRAY ['CASH_SALE'::character varying, 'CREDIT_SALE'::character varying, 'VENTES_DEPOTS'::character varying, 'VENTES_DEPOTS_AGREE'::character varying, 'REGLEMENT_DIFFERE'::character varying, 'REGLEMENT_TIERS_PAYANT'::character varying, 'SORTIE_CAISSE'::character varying, 'ENTREE_CAISSE'::character varying, 'FONDS_CAISSE'::character varying, 'REGLMENT_FOURNISSEUR'::character varying, 'CAUTION'::character varying])::text[])),
  grouped                boolean,
  part_assure            integer default 0,
  part_tiers_payant      integer default 0,
  banque_id              bigint
    constraint fkisvg65ny10fvvwvvwl5w5kged
      references banque,
  cash_register_id       bigint       not null
    constraint fkgq9ocwvjtdlt49fd0vhibjd4t
      references cash_register,
  payment_mode_code      varchar(50)  not null
    constraint fkllqlbjskwsugxh20pc7h43wd3
      references payment_mode,
  account_id             bigint
    constraint fk823dgt89dnv33jbhorxi0c1q7
      references customer_account,
  differecustomer_id     bigint
    constraint fk8byn1yh1bq27ebr0a0xld90sx
      references customer,
  facture_tierspayant_id bigint
    constraint fk1a1hqaa4d8j6ruh2qvpt9v049
      references facture_tiers_payant,
  parent_id              bigint
    constraint fk6972n014se2yx902jv033f6dc
      references payment_transaction,
  commande_id            bigint
    constraint fkct30csqexaj2yx31f8q5v7eg3
      references commande,
  sale_id                bigint,
  sale_sale_date         date,
  constraint fkay20eefv94e79v178qequ50rc
    foreign key (sale_id, sale_sale_date) references sales,
  constraint payment_transaction_check
    check (((dtype)::text <> 'InvoicePayment'::text) OR (grouped IS NOT NULL))
);

alter table payment_transaction
  owner to warehouse;

create table differe_payment_item
(
  id                 bigint generated by default as identity
    primary key,
  expected_amount    integer not null,
  paid_amount        integer not null,
  differe_payment_id bigint  not null
    constraint fkbbc7tcygixkp2yit0yfpl2pcc
      references payment_transaction,
  sale_id            bigint  not null,
  sale_sale_date     date    not null,
  constraint fkjnm480tag7d9vhoyqjgo2bg6r
    foreign key (sale_id, sale_sale_date) references sales
);

alter table differe_payment_item
  owner to warehouse;

create table invoice_payment_item
(
  id                       bigint generated by default as identity
    primary key,
  montant_attendu          integer not null,
  montant_paye             integer not null,
  invoice_payment_id       bigint  not null
    constraint fkmhbj2xqnqn61nr4p8yxejj3iv
      references payment_transaction,
  third_party_sale_line_id bigint  not null
);

alter table invoice_payment_item
  owner to warehouse;

create index pt_categorie_ca_id_index
  on payment_transaction (categorie_ca);

create table third_party_sale_line
(
  id                      bigint       not null,
  sale_date               date         not null,
  created_at              timestamp(6) not null,
  effective_update_date   timestamp(6) not null,
  montant                 integer      not null,
  montant_regle           integer,
  num_bon                 varchar(50),
  statut                  varchar(255) not null
    constraint third_party_sale_line_statut_check
      check ((statut)::text = ANY
             ((ARRAY ['ACTIF'::character varying, 'HALF_PAID'::character varying, 'DELETE'::character varying, 'CLOSED'::character varying, 'PAID'::character varying])::text[])),
  taux                    smallint     not null,
  updated_at              timestamp(6) not null,
  client_tiers_payant_id  bigint       not null
    constraint fks9p5hj252j6gdbewvphdbnw9y
      references client_tiers_payant,
  facture_tiers_payant_id bigint
    constraint fk8ybq48g2pr953xk6r5ospdkjw
      references facture_tiers_payant,
  sale_id                 bigint       not null,
  sale_sale_date          date         not null,
  primary key (id, sale_date),
  constraint uksssstaxnmgs4rmam1rgucle8k
    unique (client_tiers_payant_id, sale_id, sale_date),
  constraint fkr7d6rj2axmdi3lhpeu48a032y
    foreign key (sale_id, sale_sale_date) references sales
);

alter table third_party_sale_line
  owner to warehouse;

create index third_party_sale_line_num_bon
  on third_party_sale_line (num_bon);

create index tiers_payant_full_name_index
  on tiers_payant (full_name);

create index tiers_payant_name_index
  on tiers_payant (name);

create index tiers_payant_statut_index
  on tiers_payant (statut);

create index tiers_payant_categorie_index
  on tiers_payant (categorie);

create table tva
(
  id   bigint generated by default as identity
    primary key,
  taux integer not null
    constraint uksx5rjlj9hynan0fr5tugf2ycv
      unique
);

alter table tva
  owner to warehouse;

create table order_line
(
  id                     bigint generated by default as identity
    primary key,
  created_at             timestamp(6) not null,
  date_peremption        date,
  discount_amount        integer      not null,
  final_stock            integer,
  free_qty               integer,
  init_stock             integer      not null,
  net_amount             integer,
  order_cost_amount      integer      not null,
  order_unit_price       integer      not null,
  provisional_code       boolean,
  quantity_received      integer,
  quantity_requested     integer      not null,
  quantity_returned      integer,
  receipt_date           timestamp(6),
  tax_amount             integer,
  is_updated             boolean,
  updated_at             timestamp(6) not null,
  commande_id            bigint       not null
    constraint fkjelph47crh3lyf09c5c7sqjnq
      references commande,
  fournisseur_produit_id bigint       not null
    constraint fkkt4tdexu7oo36cobryunswmjh
      references fournisseur_produit,
  tva_id                 bigint
    constraint fkm1m4fkcj2tgcc2m9d0r65v43q
      references tva,
  constraint uksfcar1lpmp9ytui9cg75le9d5
    unique (commande_id, fournisseur_produit_id)
);

alter table order_line
  owner to warehouse;

create table lot
(
  id                   bigint generated by default as identity
    primary key,
  created_date         timestamp(6) not null,
  expiry_date          date,
  quantity_received_ug integer      not null,
  manufacturing_date   date,
  num_lot              varchar(255) not null,
  prixachat            integer      not null,
  prixunit             integer      not null,
  quantity             integer      not null,
  updated              timestamp(6),
  orderline_id         bigint       not null
    constraint fkqtvowpkxirpdc1j3mqxh2wgls
      references order_line
);

alter table lot
  owner to warehouse;

create index num_lot_index
  on lot (num_lot);

create table produit
(
  id                              bigint generated by default as identity
    primary key,
  categorie                       varchar(255)      not null
    constraint produit_categorie_check
      check ((categorie)::text = ANY
             ((ARRAY ['A'::character varying, 'B'::character varying, 'C'::character varying])::text[])),
  check_expiry_date               boolean default false,
  chiffre                         boolean default true,
  code_ean                        varchar(255),
  code_ean_labo                   varchar(255),
  code_remise                     varchar(6)
    constraint produit_code_remise_check
      check ((code_remise)::text = ANY
             ((ARRAY ['NONE'::character varying, 'CODE_0'::character varying, 'CODE_1'::character varying, 'CODE_2'::character varying, 'CODE_3'::character varying, 'CODE_4'::character varying, 'CODE_5'::character varying, 'CODE_6'::character varying, 'CODE_7'::character varying, 'CODE_8'::character varying])::text[])),
  cost_amount                     integer           not null,
  created_at                      timestamp(6)      not null,
  deconditionnable                boolean           not null,
  item_cost_amount                integer           not null
    constraint produit_item_cost_amount_check
      check (item_cost_amount >= 0),
  item_qty                        integer           not null
    constraint produit_item_qty_check
      check (item_qty >= 0),
  item_regular_unit_price         integer           not null
    constraint produit_item_regular_unit_price_check
      check (item_regular_unit_price >= 0),
  libelle                         varchar(255)      not null,
  net_unit_price                  integer           not null,
  perime_at                       date,
  prix_mnp                        integer default 0 not null,
  qty_appro                       integer default 0,
  qty_seuil_mini                  integer default 0,
  regular_unit_price              integer           not null,
  scheduled                       boolean default false,
  seuil_decond                    integer
    constraint produit_seuil_decond_check
      check (seuil_decond >= 0),
  seuil_reassort                  integer
    constraint produit_seuil_reassort_check
      check (seuil_reassort >= 0),
  status                          varchar(255)      not null
    constraint produit_status_check
      check ((status)::text = ANY
             ((ARRAY ['ENABLE'::character varying, 'DISABLE'::character varying, 'DELETED'::character varying, 'CLOSED'::character varying])::text[])),
  type_produit                    varchar(255)      not null
    constraint produit_type_produit_check
      check ((type_produit)::text = ANY
             ((ARRAY ['DETAIL'::character varying, 'PACKAGE'::character varying])::text[])),
  updated_at                      timestamp(6)      not null,
  dci_id                          bigint
    constraint fk1a3bimdll1wc7by0ng16rl58y
      references dci,
  famille_id                      bigint            not null
    constraint fk5m918v7ukauswsdgdo3pv74fa
      references famille_produit,
  forme_id                        bigint
    constraint fkl718rk1riol8vlo4ynew1bv08
      references form_produit,
  fournisseur_produit_princial_id bigint
    constraint ukahch43l6nvdao4pggfqbmpime
      unique
    constraint fk5yhxmomhxho35n3cv97x4xq5c
      references fournisseur_produit,
  gamme_id                        bigint
    constraint fk5nonk9ie64lu7b27m1a8fs741
      references gamme_produit,
  laboratoire_id                  bigint
    constraint fkhowc8u7evv6pewlrvhs0q1lap
      references laboratoire,
  parent_id                       bigint
    constraint fkchxb0k9i70n6x9sa3mcpgfqei
      references produit,
  tableau_id                      bigint
    constraint fkh4p706en3rc1tbafjh6goa7yp
      references tableau,
  tva_id                          bigint            not null
    constraint fkabkfkm5f6kst7099gv3dafaac
      references tva,
  constraint ukhaaprmfc9pf1bp3n5g9dnkx91
    unique (libelle, type_produit)
);

alter table produit
  owner to warehouse;

create table ajustement
(
  id                  bigint generated by default as identity
    primary key,
  date_mtv            timestamp(6) not null,
  qty_mvt             integer      not null,
  stock_after         integer      not null,
  stock_before        integer      not null,
  type_ajust          varchar(255) not null
    constraint ajustement_type_ajust_check
      check ((type_ajust)::text = ANY
             ((ARRAY ['AJUSTEMENT_IN'::character varying, 'AJUSTEMENT_OUT'::character varying])::text[])),
  ajust_id            bigint       not null
    constraint fkex9228479j8udon2wd8gm5dot
      references ajust,
  motif_ajustement_id bigint
    constraint fkpstvc4bcssojfv5absxm5vtba
      references motif_ajustement,
  produit_id          bigint       not null
    constraint fkgem9o7c8roq5g1lb555j4hnlh
      references produit,
  constraint ukpl3ledfcmf6v758vp99whh00j
    unique (ajust_id, produit_id)
);

alter table ajustement
  owner to warehouse;

create table decondition
(
  id                     bigint generated by default as identity
    primary key,
  date_mtv               timestamp(6) not null,
  qty_mvt                integer      not null,
  stock_after            integer      not null,
  stock_before           integer      not null,
  type_deconditionnement varchar(255) not null
    constraint decondition_type_deconditionnement_check
      check ((type_deconditionnement)::text = ANY
             ((ARRAY ['DECONDTION_IN'::character varying, 'DECONDTION_OUT'::character varying])::text[])),
  produit_id             bigint       not null
    constraint fkdmoni6sfl6sh38ej7gngqhg6y
      references produit,
  user_id                bigint       not null
    constraint fkofve9og5fjabgbs49cuvnr1bm
      references app_user
);

alter table decondition
  owner to warehouse;

alter table fournisseur_produit
  add constraint fkd2gc16hsakliy5idekx467yip
    foreign key (produit_id) references produit;

create table inventory_transaction
(
  id                 bigint generated by default as identity
    primary key,
  cost_amount        integer      not null,
  created_at         timestamp(6) not null,
  entity_id          bigint       not null,
  mouvemen_type      varchar(255) not null
    constraint inventory_transaction_mouvemen_type_check
      check ((mouvemen_type)::text = ANY
             ((ARRAY ['SALE'::character varying, 'DELETE_SALE'::character varying, 'CANCEL_SALE'::character varying, 'AJUSTEMENT_IN'::character varying, 'AJUSTEMENT_OUT'::character varying, 'INVENTAIRE'::character varying, 'COMMANDE'::character varying, 'DECONDTION_IN'::character varying, 'DECONDTION_OUT'::character varying, 'MOUVEMENT_STOCK_IN'::character varying, 'MOUVEMENT_STOCK_OUT'::character varying, 'ENTREE_STOCK'::character varying, 'RETRAIT_PERIME'::character varying, 'RETOUR_DEPOT'::character varying, 'RETOUR_FOURNISSEUR'::character varying])::text[])),
  quantity           integer      not null,
  quantity_after     integer      not null,
  quantity_befor     integer      not null,
  regular_unit_price integer      not null,
  magasin_id         bigint       not null
    constraint fka7i5348dxyy1dnnhvo05nr4ve
      references magasin,
  produit_id         bigint       not null
    constraint fk30wj3ywp114bifpc3xu7rex3i
      references produit,
  user_id            bigint       not null
    constraint fk6r4gei4ysrt37mcj4o59km9n1
      references app_user,
  constraint ukhwoaph91x6smbh91fs1jym0ur
    unique (entity_id, produit_id, mouvemen_type)
);

alter table inventory_transaction
  owner to warehouse;

create index mouvemen_type_index
  on inventory_transaction (mouvemen_type);

create index createdat_index
  on inventory_transaction (created_at);

create index libelle_index
  on produit (libelle);

create index codeean_index
  on produit (code_ean);

create index status_index
  on produit (status);

create table produit_perime
(
  id              bigint generated by default as identity
    primary key,
  after_stock     integer      not null,
  created         timestamp(6) not null,
  init_stock      integer      not null
    constraint produit_perime_init_stock_check
      check (init_stock >= 1),
  peremption_date date         not null,
  quantity        integer      not null
    constraint produit_perime_quantity_check
      check (quantity >= 1),
  lot_id          bigint
    constraint fk7qyne8q37phmm5hld2e6byxco
      references lot,
  produit_id      bigint       not null
    constraint fkg4s7frhwa9ci11yr77momll5r
      references produit,
  user_id         bigint       not null
    constraint fkrsnr2843y8jbjq7e9b4ptenmf
      references app_user
);

alter table produit_perime
  owner to warehouse;

create index produit_perime_index
  on produit_perime (peremption_date);

create table produit_tiers_payant_prix
(
  id              bigint generated by default as identity
    primary key,
  created         timestamp(6) default now() not null,
  enabled         boolean      default true  not null,
  price           integer                    not null,
  rate            real                       not null,
  prix_type       varchar(255)               not null
    constraint produit_tiers_payant_prix_prix_type_check
      check ((prix_type)::text = ANY
             ((ARRAY ['REFERENCE'::character varying, 'POURCENTAGE'::character varying, 'MIXED_REFERENCE_POURCENTAGE'::character varying])::text[])),
  updated         timestamp(6) default now() not null,
  produit_id      bigint                     not null
    constraint fkdhdiuc2eglbqm449qauj1cp0r
      references produit,
  tiers_payant_id bigint                     not null
    constraint fkpfl0w0p1erkmdlla0lqtmuwa9
      references tiers_payant,
  user_id         bigint                     not null
    constraint fkmmsgvc2xrkg1o73nmd93xullr
      references app_user,
  constraint uk13e9w8dannsq7dxs809frd99o
    unique (produit_id, tiers_payant_id, enabled),
  constraint ukg0g38ar8rjkvia2ia8syledf9
    unique (produit_id, tiers_payant_id, prix_type)
);

alter table produit_tiers_payant_prix
  owner to warehouse;

create table rayon_produit
(
  id         bigint generated by default as identity
    primary key,
  produit_id bigint not null
    constraint fk8ux9wik1mhtffce4o7s08dahe
      references produit,
  rayon_id   bigint not null
    constraint fkjqh6g957rhoboh4l4atf6t78t
      references rayon,
  constraint ukarionkb6k29slypt62myqg6sb
    unique (produit_id, rayon_id)
);

alter table rayon_produit
  owner to warehouse;

create table retour_bon
(
  id                     bigint generated by default as identity
    primary key,
  commentaire            varchar(150),
  date_mtv               timestamp(6) not null,
  statut                 varchar(255) not null
    constraint retour_bon_statut_check
      check ((statut)::text = ANY
             ((ARRAY ['PROCESSING'::character varying, 'CLOSED'::character varying])::text[])),
  productstilloutofstock boolean      not null,
  qty                    integer      not null,
  commande_id            bigint       not null
    constraint fktqs59qxfvlt4nrgq8mqagenga
      references commande,
  user_id                bigint       not null
    constraint fkp4ms6ocxy4cmlmf3k6f00heui
      references app_user,
  fournisseur_id         bigint       not null
    constraint fkfko6371dgn8xsh42yuc9wnv00
      references fournisseur,
  produit_id             bigint       not null
    constraint fkef83194t0qmdrc9wf6tj429as
      references produit
);

alter table retour_bon
  owner to warehouse;

create table reponse_retour_bon
(
  id            bigint generated by default as identity
    primary key,
  commentaire   varchar(150),
  date_mtv      timestamp(6) not null,
  modified_date timestamp(6) not null,
  statut        char         not null
    constraint reponse_retour_bon_statut_check
      check (statut = ANY (ARRAY ['PROCESSING'::bpchar, 'CLOSED'::bpchar])),
  retourbon_id  bigint       not null
    constraint fkl8i9koworq3emtl9vo2vcndf9
      references retour_bon,
  user_id       bigint       not null
    constraint fkk3necq4l7bn9beo92nh5ppwyj
      references app_user
);

alter table reponse_retour_bon
  owner to warehouse;

create table retour_bon_item
(
  id              bigint generated by default as identity
    primary key,
  after_stock     integer,
  date_mtv        timestamp(6) not null,
  init_stock      integer      not null,
  qty_mvt         integer      not null
    constraint retour_bon_item_qty_mvt_check
      check (qty_mvt >= 1),
  lot_id          bigint
    constraint fksq7ju65jlgejnnvj1ep3d1vmo
      references lot,
  motif_retour_id bigint       not null
    constraint fk9yua85has78k1itu1pjp8rvyg
      references motif_retour_produit,
  orderline_id    bigint       not null
    constraint fk37xgdv71tg5xv7a573tou1yop
      references order_line,
  retour_bon_id   bigint       not null
    constraint fk7f3y7rovqwt9wygs25l6baqky
      references retour_bon
);

alter table retour_bon_item
  owner to warehouse;

create table reponse_retour_bon_item
(
  id                  bigint generated by default as identity
    primary key,
  after_stock         integer,
  date_mtv            timestamp(6) not null,
  init_stock          integer      not null,
  qty_mvt             integer      not null
    constraint reponse_retour_bon_item_qty_mvt_check
      check (qty_mvt >= 0),
  reponseretourbon_id bigint       not null
    constraint fkc1ctllsol0a4cgvipsxq44mik
      references reponse_retour_bon,
  retourbonitem_id    bigint       not null
    constraint fk3p2g32ic5cmh9k0lfst3riqs7
      references retour_bon_item
);

alter table reponse_retour_bon_item
  owner to warehouse;

create table sales_line
(
  id                              bigint            not null,
  sale_date                       date              not null,
  after_stock                     integer,
  amount_to_be_taken_into_account integer           not null,
  calculation_base_price          integer,
  cost_amount                     integer default 0 not null,
  created_at                      timestamp(6)      not null,
  discount_amount                 integer default 0 not null,
  discount_unit_price             integer default 0 not null,
  effective_update_date           timestamp(6)      not null,
  init_stock                      integer,
  lots                            jsonb,
  net_unit_price                  integer default 0 not null,
  quantity_avoir                  integer default 0 not null,
  quantity_requested              integer           not null,
  quantity_sold                   integer           not null,
  quantity_ug                     integer default 0 not null,
  rates                           jsonb,
  regular_unit_price              integer default 0 not null,
  sales_amount                    integer default 0 not null,
  taux_remise                     real,
  tax_value                       integer default 0 not null,
  to_ignore                       boolean           not null,
  updated_at                      timestamp(6)      not null,
  produit_id                      bigint            not null
    constraint fkg41n8hm3d58j50hsogv0vv2er
      references produit,
  sales_id                        bigint            not null,
  sales_sale_date                 date              not null,
  primary key (id, sale_date),
  constraint uk26du1shb0ch6r3v6d3ytmue60
    unique (produit_id, sales_id, sale_date),
  constraint fkk6ve4mxxrx30mo66kt6ksgoia
    foreign key (sales_id, sales_sale_date) references sales
) PARTITION BY RANGE (sale_date);

alter table sales_line
  owner to warehouse;

create table stock_produit
(
  id               bigint generated by default as identity
    primary key,
  created_at       timestamp(6) not null,
  last_modified_by varchar(50),
  qty_stock        integer      not null,
  qty_ug           integer      not null
    constraint stock_produit_qty_ug_check
      check (qty_ug >= 0),
  qty_virtual      integer      not null,
  updated_at       timestamp(6) not null,
  produit_id       bigint       not null
    constraint fk1lnsn9h1evyxwnnktixqo2wc
      references produit,
  storage_id       bigint       not null
    constraint fk8kuouqq6nv3lx0eb3wd73kf95
      references storage,
  constraint uk209l3yi42tlex9i3yft8nb4n9
    unique (storage_id, produit_id)
);

alter table stock_produit
  owner to warehouse;

create table repartition_stock_produit
(
  id                           bigint generated by default as identity
    primary key,
  created_at                   timestamp(6) not null,
  dest_final_stock             integer      not null,
  dest_init_stock              integer      not null,
  qty_mvt                      integer      not null,
  source_final_stock           integer      not null,
  source_init_stock            integer      not null,
  produit_id                   bigint       not null
    constraint fkj2oonew83hnf8pmi8nmfiejpo
      references produit,
  stock_produit_destination_id bigint       not null
    constraint fkrxga8j2mjur3aw43h3bq6l909
      references stock_produit,
  stock_produit_source_id      bigint       not null
    constraint fkgyu4w5fylq30wrdc1n284yuqg
      references stock_produit,
  user_id                      bigint       not null
    constraint fk9lxmafennj6krja8nqnkrd50
      references app_user
);

alter table repartition_stock_produit
  owner to warehouse;

create table store_inventory_line
(
  id                   bigint generated by default as identity
    primary key,
  gap                  integer,
  inventory_value_cost integer,
  last_unit_price      integer,
  quantity_init        integer,
  quantity_on_hand     integer,
  quantity_sold        integer,
  updated              boolean      not null,
  updated_at           timestamp(6) not null,
  produit_id           bigint       not null
    constraint fkg8d5ld2v2vy7tr54mwar1rh9
      references produit,
  store_inventory_id   bigint       not null
    constraint fkoe713l7vns3jb1eo2uhniy4q3
      references store_inventory,
  constraint ukhidvm20io56axybnk34jqvs4c
    unique (produit_id, store_inventory_id)
);

alter table store_inventory_line
  owner to warehouse;

create table substitut
(
  id             bigint generated by default as identity
    primary key,
  type_substitut varchar(255) not null
    constraint substitut_type_substitut_check
      check ((type_substitut)::text = ANY
             ((ARRAY ['GENERIQUE'::character varying, 'THERAPEUTIQUE'::character varying])::text[])),
  produit_id     bigint       not null
    constraint fkpng5sgxh6pebef0amhpns5ndj
      references produit,
  substitut_id   bigint       not null
    constraint fkhko54cwr8duquqk53yxv43qm
      references produit,
  constraint uk3sjp95psbhioyym08o2hh58ww
    unique (produit_id, substitut_id)
);

alter table substitut
  owner to warehouse;

create table user_authority
(
  user_id        bigint      not null
    constraint fkeoyor0ywyy3m5xntqmjvah310
      references app_user,
  authority_name varchar(50) not null
    constraint fk6ktglpl5mjosa283rvken2py5
      references authority,
  primary key (user_id, authority_name)
);

alter table user_authority
  owner to warehouse;

create table utilisation_cle_securite
(
  id                  bigint generated by default as identity
    primary key,
  caisse              varchar(255) not null,
  commentaire         varchar(255),
  entity_id           bigint,
  entity_name         varchar(255),
  mvt_date            timestamp(6) not null,
  clesecuriteowner_id bigint       not null
    constraint fk6gaf4th30fmybaaj5xp00kw7
      references app_user,
  connecteduser_id    bigint       not null
    constraint fkf1av323jd23jifhw6gtkmwfhk
      references app_user,
  privilege_name      varchar(100) not null
    constraint fkn7rvgfahogx5tsdpa5yvtc9s6
      references privilege
);

alter table utilisation_cle_securite
  owner to warehouse;

create table warehouse_calendar
(
  workday   date    not null
    primary key,
  workmonth integer not null,
  workyear  integer not null
);

alter table warehouse_calendar
  owner to warehouse;

create table warehouse_sequence
(
  name      varchar(255) not null
    primary key,
  increment smallint default 1,
  seq_value integer  default 0
);

alter table warehouse_sequence
  owner to warehouse;

